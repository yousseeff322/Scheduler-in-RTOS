
MySchedluer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000964  08000964  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000964  08000964  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000964  08000964  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000964  08000964  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000964  08000964  00010964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000968  08000968  00010968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800096c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000970  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000970  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000952  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003eb  00000000  00000000  0002097f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  00020d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001041  00000000  00000000  00021018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000079a  00000000  00000000  00022059  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000041dd  00000000  00000000  000227f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000269d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000046c  00000000  00000000  00026a4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800094c 	.word	0x0800094c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800094c 	.word	0x0800094c

08000170 <MGPIO_VidSetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"



void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d03e      	beq.n	8000206 <MGPIO_VidSetPinDirection+0x96>
 8000188:	2b02      	cmp	r3, #2
 800018a:	d075      	beq.n	8000278 <MGPIO_VidSetPinDirection+0x108>
 800018c:	2b00      	cmp	r3, #0
 800018e:	d000      	beq.n	8000192 <MGPIO_VidSetPinDirection+0x22>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 8000190:	e0b0      	b.n	80002f4 <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	2b07      	cmp	r3, #7
 8000196:	d817      	bhi.n	80001c8 <MGPIO_VidSetPinDirection+0x58>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 8000198:	4b59      	ldr	r3, [pc, #356]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	79ba      	ldrb	r2, [r7, #6]
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	210f      	movs	r1, #15
 80001a2:	fa01 f202 	lsl.w	r2, r1, r2
 80001a6:	43d2      	mvns	r2, r2
 80001a8:	4611      	mov	r1, r2
 80001aa:	4a55      	ldr	r2, [pc, #340]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 80001ac:	400b      	ands	r3, r1
 80001ae:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80001b0:	4b53      	ldr	r3, [pc, #332]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	7979      	ldrb	r1, [r7, #5]
 80001b6:	79ba      	ldrb	r2, [r7, #6]
 80001b8:	0092      	lsls	r2, r2, #2
 80001ba:	fa01 f202 	lsl.w	r2, r1, r2
 80001be:	4611      	mov	r1, r2
 80001c0:	4a4f      	ldr	r2, [pc, #316]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 80001c2:	430b      	orrs	r3, r1
 80001c4:	6013      	str	r3, [r2, #0]
		break;
 80001c6:	e090      	b.n	80002ea <MGPIO_VidSetPinDirection+0x17a>
		}else if(Copy_u8Pin <=15 ){//high
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	2b0f      	cmp	r3, #15
 80001cc:	f200 808d 	bhi.w	80002ea <MGPIO_VidSetPinDirection+0x17a>
			Copy_u8Pin = Copy_u8Pin - 8;
 80001d0:	79bb      	ldrb	r3, [r7, #6]
 80001d2:	3b08      	subs	r3, #8
 80001d4:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80001d6:	4b4a      	ldr	r3, [pc, #296]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	79ba      	ldrb	r2, [r7, #6]
 80001dc:	0092      	lsls	r2, r2, #2
 80001de:	210f      	movs	r1, #15
 80001e0:	fa01 f202 	lsl.w	r2, r1, r2
 80001e4:	43d2      	mvns	r2, r2
 80001e6:	4611      	mov	r1, r2
 80001e8:	4a45      	ldr	r2, [pc, #276]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 80001ea:	400b      	ands	r3, r1
 80001ec:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80001ee:	4b44      	ldr	r3, [pc, #272]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	7979      	ldrb	r1, [r7, #5]
 80001f4:	79ba      	ldrb	r2, [r7, #6]
 80001f6:	0092      	lsls	r2, r2, #2
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	4611      	mov	r1, r2
 80001fe:	4a40      	ldr	r2, [pc, #256]	; (8000300 <MGPIO_VidSetPinDirection+0x190>)
 8000200:	430b      	orrs	r3, r1
 8000202:	6053      	str	r3, [r2, #4]
		break;
 8000204:	e071      	b.n	80002ea <MGPIO_VidSetPinDirection+0x17a>
		if(Copy_u8Pin <= 7 ){//low
 8000206:	79bb      	ldrb	r3, [r7, #6]
 8000208:	2b07      	cmp	r3, #7
 800020a:	d817      	bhi.n	800023c <MGPIO_VidSetPinDirection+0xcc>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 800020c:	4b3d      	ldr	r3, [pc, #244]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	79ba      	ldrb	r2, [r7, #6]
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	210f      	movs	r1, #15
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	43d2      	mvns	r2, r2
 800021c:	4611      	mov	r1, r2
 800021e:	4a39      	ldr	r2, [pc, #228]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 8000220:	400b      	ands	r3, r1
 8000222:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000224:	4b37      	ldr	r3, [pc, #220]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	7979      	ldrb	r1, [r7, #5]
 800022a:	79ba      	ldrb	r2, [r7, #6]
 800022c:	0092      	lsls	r2, r2, #2
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	4611      	mov	r1, r2
 8000234:	4a33      	ldr	r2, [pc, #204]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 8000236:	430b      	orrs	r3, r1
 8000238:	6013      	str	r3, [r2, #0]
		break;
 800023a:	e058      	b.n	80002ee <MGPIO_VidSetPinDirection+0x17e>
		}else if(Copy_u8Pin <=15 ){//high
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	2b0f      	cmp	r3, #15
 8000240:	d855      	bhi.n	80002ee <MGPIO_VidSetPinDirection+0x17e>
			Copy_u8Pin = Copy_u8Pin - 8;
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	3b08      	subs	r3, #8
 8000246:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000248:	4b2e      	ldr	r3, [pc, #184]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	210f      	movs	r1, #15
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	43d2      	mvns	r2, r2
 8000258:	4611      	mov	r1, r2
 800025a:	4a2a      	ldr	r2, [pc, #168]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 800025c:	400b      	ands	r3, r1
 800025e:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	7979      	ldrb	r1, [r7, #5]
 8000266:	79ba      	ldrb	r2, [r7, #6]
 8000268:	0092      	lsls	r2, r2, #2
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a24      	ldr	r2, [pc, #144]	; (8000304 <MGPIO_VidSetPinDirection+0x194>)
 8000272:	430b      	orrs	r3, r1
 8000274:	6053      	str	r3, [r2, #4]
		break;
 8000276:	e03a      	b.n	80002ee <MGPIO_VidSetPinDirection+0x17e>
		if(Copy_u8Pin <= 7 ){//low
 8000278:	79bb      	ldrb	r3, [r7, #6]
 800027a:	2b07      	cmp	r3, #7
 800027c:	d817      	bhi.n	80002ae <MGPIO_VidSetPinDirection+0x13e>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 800027e:	4b22      	ldr	r3, [pc, #136]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	79ba      	ldrb	r2, [r7, #6]
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	210f      	movs	r1, #15
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	43d2      	mvns	r2, r2
 800028e:	4611      	mov	r1, r2
 8000290:	4a1d      	ldr	r2, [pc, #116]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 8000292:	400b      	ands	r3, r1
 8000294:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	7979      	ldrb	r1, [r7, #5]
 800029c:	79ba      	ldrb	r2, [r7, #6]
 800029e:	0092      	lsls	r2, r2, #2
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a18      	ldr	r2, [pc, #96]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80002a8:	430b      	orrs	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
		break;
 80002ac:	e021      	b.n	80002f2 <MGPIO_VidSetPinDirection+0x182>
		}else if(Copy_u8Pin <=15 ){//high
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	2b0f      	cmp	r3, #15
 80002b2:	d81e      	bhi.n	80002f2 <MGPIO_VidSetPinDirection+0x182>
			Copy_u8Pin = Copy_u8Pin - 8;
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	3b08      	subs	r3, #8
 80002b8:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	79ba      	ldrb	r2, [r7, #6]
 80002c0:	0092      	lsls	r2, r2, #2
 80002c2:	210f      	movs	r1, #15
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	43d2      	mvns	r2, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80002ce:	400b      	ands	r3, r1
 80002d0:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	7979      	ldrb	r1, [r7, #5]
 80002d8:	79ba      	ldrb	r2, [r7, #6]
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	fa01 f202 	lsl.w	r2, r1, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <MGPIO_VidSetPinDirection+0x198>)
 80002e4:	430b      	orrs	r3, r1
 80002e6:	6053      	str	r3, [r2, #4]
		break;
 80002e8:	e003      	b.n	80002f2 <MGPIO_VidSetPinDirection+0x182>
		break;
 80002ea:	bf00      	nop
 80002ec:	e002      	b.n	80002f4 <MGPIO_VidSetPinDirection+0x184>
		break;
 80002ee:	bf00      	nop
 80002f0:	e000      	b.n	80002f4 <MGPIO_VidSetPinDirection+0x184>
		break;
 80002f2:	bf00      	nop
	}

}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40010800 	.word	0x40010800
 8000304:	40010c00 	.word	0x40010c00
 8000308:	40011000 	.word	0x40011000

0800030c <MGPIO_VidTogglePin>:

}



void MGPIO_VidTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8Port) {
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d00f      	beq.n	8000342 <MGPIO_VidTogglePin+0x36>
 8000322:	2b02      	cmp	r3, #2
 8000324:	d018      	beq.n	8000358 <MGPIO_VidTogglePin+0x4c>
 8000326:	2b00      	cmp	r3, #0
 8000328:	d000      	beq.n	800032c <MGPIO_VidTogglePin+0x20>
            break;
        case GPIOC:
            MGPIOC->ODR ^= (1 << Copy_u8Pin);  // Toggle the pin using XOR
            break;
        default:
            break;
 800032a:	e020      	b.n	800036e <MGPIO_VidTogglePin+0x62>
            MGPIOA->ODR ^= (1 << Copy_u8Pin);  // Toggle the pin using XOR
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MGPIO_VidTogglePin+0x6c>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	2101      	movs	r1, #1
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	4611      	mov	r1, r2
 800033a:	4a0f      	ldr	r2, [pc, #60]	; (8000378 <MGPIO_VidTogglePin+0x6c>)
 800033c:	404b      	eors	r3, r1
 800033e:	60d3      	str	r3, [r2, #12]
            break;
 8000340:	e015      	b.n	800036e <MGPIO_VidTogglePin+0x62>
            MGPIOB->ODR ^= (1 << Copy_u8Pin);  // Toggle the pin using XOR
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MGPIO_VidTogglePin+0x70>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	79ba      	ldrb	r2, [r7, #6]
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	4a0a      	ldr	r2, [pc, #40]	; (800037c <MGPIO_VidTogglePin+0x70>)
 8000352:	404b      	eors	r3, r1
 8000354:	60d3      	str	r3, [r2, #12]
            break;
 8000356:	e00a      	b.n	800036e <MGPIO_VidTogglePin+0x62>
            MGPIOC->ODR ^= (1 << Copy_u8Pin);  // Toggle the pin using XOR
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MGPIO_VidTogglePin+0x74>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	79ba      	ldrb	r2, [r7, #6]
 800035e:	2101      	movs	r1, #1
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a06      	ldr	r2, [pc, #24]	; (8000380 <MGPIO_VidTogglePin+0x74>)
 8000368:	404b      	eors	r3, r1
 800036a:	60d3      	str	r3, [r2, #12]
            break;
 800036c:	bf00      	nop
    }
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40010800 	.word	0x40010800
 800037c:	40010c00 	.word	0x40010c00
 8000380:	40011000 	.word	0x40011000

08000384 <Stack_voidSchedulerStackInit>:



__attribute__((naked)) void Stack_voidSchedulerStackInit(u32 Copy_u32SchedTOS)
{
	__asm volatile ("MSR MSP , R0") ;
 8000384:	f380 8808 	msr	MSP, r0

	__asm volatile("BX LR") ;
 8000388:	4770      	bx	lr
}
 800038a:	bf00      	nop

0800038c <MSTK_voidInit>:



void MSTK_voidInit(u32 Copy_u8TickHz)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

	u32 Local_u32ReloadVal = SYSTICK_TIM_CLK / Copy_u8TickHz ;
 8000394:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <MSTK_voidInit+0x4c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	fbb2 f3f3 	udiv	r3, r2, r3
 800039c:	60fb      	str	r3, [r7, #12]

	Local_u32ReloadVal-- ;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	3b01      	subs	r3, #1
 80003a2:	60fb      	str	r3, [r7, #12]

	MSTK->LOAD = Local_u32ReloadVal ;
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <MSTK_voidInit+0x50>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6053      	str	r3, [r2, #4]

	/* ُenable systick exception */
	MSTK->CTRL  |=1<<1 ;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MSTK_voidInit+0x50>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <MSTK_voidInit+0x50>)
 80003b0:	f043 0302 	orr.w	r3, r3, #2
 80003b4:	6013      	str	r3, [r2, #0]
	/* enable systick clock source */
	MSTK->CTRL  |=1<<2 ;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MSTK_voidInit+0x50>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a08      	ldr	r2, [pc, #32]	; (80003dc <MSTK_voidInit+0x50>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	6013      	str	r3, [r2, #0]
	/* enable systick Timer */
	MSTK->CTRL  |=1<<0 ;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MSTK_voidInit+0x50>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a05      	ldr	r2, [pc, #20]	; (80003dc <MSTK_voidInit+0x50>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6013      	str	r3, [r2, #0]

}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	007a1200 	.word	0x007a1200
 80003dc:	e000e010 	.word	0xe000e010

080003e0 <PendSV_Handler>:

__attribute ((naked))void PendSV_Handler(void)
{
	/*A -  save context  current task */
	/*1- Get  current running Task PSP value */
	__asm volatile ("MRS R0 , PSP ") ;
 80003e0:	f3ef 8009 	mrs	r0, PSP
	/* 2- using PSP value , Store SF2 (R4 -> R11 ) */
	__asm volatile ("STMDB R0! , {R4-R11}") ;
 80003e4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile ("PUSH {LR}  ") ;
 80003e8:	b500      	push	{lr}
	/* 3- Save Current Value of PSP */
	__asm volatile ("BL SaveCurrentPSPValue  ") ;
 80003ea:	f000 f8e3 	bl	80005b4 <SaveCurrentPSPValue>
	/*B-  retrieve context of next task*/

	/*1 - Decide Next Task To Run */
	__asm volatile ("Bl UpdateNextTask") ;
 80003ee:	f000 f91d 	bl	800062c <UpdateNextTask>
	/* 2 Get PSP value */
	__asm volatile ("BL GetCurrentPSPValue") ;
 80003f2:	f000 f8cf 	bl	8000594 <GetCurrentPSPValue>

	__asm volatile ("POP {LR}  ") ;
 80003f6:	f85d eb04 	ldr.w	lr, [sp], #4

	/* 3- retrieve SF2 */
	__asm volatile ("LDMIA R0! , {R4-R11}") ;
 80003fa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	/* 4-UPDATE PSP VALUE */
	__asm volatile ("MSR PSP , R0 ") ;
 80003fe:	f380 8809 	msr	PSP, r0
	/*5-EXIT*/
	__asm volatile ("BX LR") ;
 8000402:	4770      	bx	lr


}
 8000404:	bf00      	nop
	...

08000408 <UnBlockTask>:

static void UnBlockTask(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
	u8 Local_u8TaskCounter ;

	for (Local_u8TaskCounter = 1 ; Local_u8TaskCounter< MAX_TASK_NUM ; Local_u8TaskCounter++ )
 800040e:	2301      	movs	r3, #1
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	e01b      	b.n	800044c <UnBlockTask+0x44>
	{
		if(UserTasks[Local_u8TaskCounter].CurrentState == BlockedState)
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <UnBlockTask+0x54>)
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	4413      	add	r3, r2
 800041c:	3308      	adds	r3, #8
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d110      	bne.n	8000446 <UnBlockTask+0x3e>
		{
			if (UserTasks[Local_u8TaskCounter].BlockCount ==GlobalTickCount)
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4a0d      	ldr	r2, [pc, #52]	; (800045c <UnBlockTask+0x54>)
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	4413      	add	r3, r2
 800042c:	3304      	adds	r3, #4
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <UnBlockTask+0x58>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	d106      	bne.n	8000446 <UnBlockTask+0x3e>
			{

				UserTasks[Local_u8TaskCounter].CurrentState = ReadyState ;
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	4a08      	ldr	r2, [pc, #32]	; (800045c <UnBlockTask+0x54>)
 800043c:	011b      	lsls	r3, r3, #4
 800043e:	4413      	add	r3, r2
 8000440:	3308      	adds	r3, #8
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
	for (Local_u8TaskCounter = 1 ; Local_u8TaskCounter< MAX_TASK_NUM ; Local_u8TaskCounter++ )
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	3301      	adds	r3, #1
 800044a:	71fb      	strb	r3, [r7, #7]
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b04      	cmp	r3, #4
 8000450:	d9e0      	bls.n	8000414 <UnBlockTask+0xc>

			}
		}
	}
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	20000024 	.word	0x20000024
 8000460:	20000020 	.word	0x20000020

08000464 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	/* Udate Global TickCount */
	GlobalTickCount++ ;
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <SysTick_Handler+0x24>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	4a06      	ldr	r2, [pc, #24]	; (8000488 <SysTick_Handler+0x24>)
 8000470:	6013      	str	r3, [r2, #0]

	/* un Block Task */
	UnBlockTask() ;
 8000472:	f7ff ffc9 	bl	8000408 <UnBlockTask>

	/* Pend PendSV  */
	SCB->ICSR |= (1 <<28) ;
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <SysTick_Handler+0x28>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	4a04      	ldr	r2, [pc, #16]	; (800048c <SysTick_Handler+0x28>)
 800047c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000480:	6053      	str	r3, [r2, #4]



}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000020 	.word	0x20000020
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <InitTasksStack>:



void InitTasksStack(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0

	u32* Local_pu32TaskPSP ;
	u8 Local_u8LoopIndex ;
	u8 Local_u8LoopIndexGPRS ;
	/*init task psp*/
	UserTasks[0].PSPValue = IDEL_TASK_STACK_START ;
 8000496:	4b34      	ldr	r3, [pc, #208]	; (8000568 <InitTasksStack+0xd8>)
 8000498:	4a34      	ldr	r2, [pc, #208]	; (800056c <InitTasksStack+0xdc>)
 800049a:	601a      	str	r2, [r3, #0]
	UserTasks[1].PSPValue = T1_STACK_START ;
 800049c:	4b32      	ldr	r3, [pc, #200]	; (8000568 <InitTasksStack+0xd8>)
 800049e:	4a34      	ldr	r2, [pc, #208]	; (8000570 <InitTasksStack+0xe0>)
 80004a0:	611a      	str	r2, [r3, #16]
	UserTasks[2].PSPValue = T2_STACK_START ;
 80004a2:	4b31      	ldr	r3, [pc, #196]	; (8000568 <InitTasksStack+0xd8>)
 80004a4:	4a33      	ldr	r2, [pc, #204]	; (8000574 <InitTasksStack+0xe4>)
 80004a6:	621a      	str	r2, [r3, #32]
	UserTasks[3].PSPValue = T3_STACK_START ;
 80004a8:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <InitTasksStack+0xd8>)
 80004aa:	4a33      	ldr	r2, [pc, #204]	; (8000578 <InitTasksStack+0xe8>)
 80004ac:	631a      	str	r2, [r3, #48]	; 0x30
	UserTasks[4].PSPValue = T4_STACK_START ;
 80004ae:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <InitTasksStack+0xd8>)
 80004b0:	4a32      	ldr	r2, [pc, #200]	; (800057c <InitTasksStack+0xec>)
 80004b2:	641a      	str	r2, [r3, #64]	; 0x40


	/*init task handler */
	UserTasks[0].TaskHandler = &IdealTaskHandler ;
 80004b4:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <InitTasksStack+0xd8>)
 80004b6:	4a32      	ldr	r2, [pc, #200]	; (8000580 <InitTasksStack+0xf0>)
 80004b8:	60da      	str	r2, [r3, #12]
	UserTasks[1].TaskHandler = &Task1_Handler ;
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <InitTasksStack+0xd8>)
 80004bc:	4a31      	ldr	r2, [pc, #196]	; (8000584 <InitTasksStack+0xf4>)
 80004be:	61da      	str	r2, [r3, #28]
	UserTasks[2].TaskHandler = &Task2_Handler ;
 80004c0:	4b29      	ldr	r3, [pc, #164]	; (8000568 <InitTasksStack+0xd8>)
 80004c2:	4a31      	ldr	r2, [pc, #196]	; (8000588 <InitTasksStack+0xf8>)
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
	UserTasks[3].TaskHandler = &Task3_Handler ;
 80004c6:	4b28      	ldr	r3, [pc, #160]	; (8000568 <InitTasksStack+0xd8>)
 80004c8:	4a30      	ldr	r2, [pc, #192]	; (800058c <InitTasksStack+0xfc>)
 80004ca:	63da      	str	r2, [r3, #60]	; 0x3c
	UserTasks[4].TaskHandler = &Task4_Handler ;
 80004cc:	4b26      	ldr	r3, [pc, #152]	; (8000568 <InitTasksStack+0xd8>)
 80004ce:	4a30      	ldr	r2, [pc, #192]	; (8000590 <InitTasksStack+0x100>)
 80004d0:	64da      	str	r2, [r3, #76]	; 0x4c



	for (Local_u8LoopIndex = 0 ; Local_u8LoopIndex < MAX_TASK_NUM ; Local_u8LoopIndex++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	70fb      	strb	r3, [r7, #3]
 80004d6:	e03e      	b.n	8000556 <InitTasksStack+0xc6>
	{
		/*init task is ready */
		UserTasks[Local_u8LoopIndex].CurrentState = ReadyState ;
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <InitTasksStack+0xd8>)
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	4413      	add	r3, r2
 80004e0:	3308      	adds	r3, #8
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]

		Local_pu32TaskPSP = (u32*) UserTasks[Local_u8LoopIndex].PSPValue ;
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	4a1f      	ldr	r2, [pc, #124]	; (8000568 <InitTasksStack+0xd8>)
 80004ea:	011b      	lsls	r3, r3, #4
 80004ec:	4413      	add	r3, r2
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	607b      	str	r3, [r7, #4]

		Local_pu32TaskPSP-- ;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3b04      	subs	r3, #4
 80004f6:	607b      	str	r3, [r7, #4]
		*Local_pu32TaskPSP = DUMMY_XPSR ;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004fe:	601a      	str	r2, [r3, #0]

		Local_pu32TaskPSP-- ;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3b04      	subs	r3, #4
 8000504:	607b      	str	r3, [r7, #4]
		*Local_pu32TaskPSP = (u32)UserTasks[Local_u8LoopIndex].TaskHandler ;
 8000506:	78fb      	ldrb	r3, [r7, #3]
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <InitTasksStack+0xd8>)
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	4413      	add	r3, r2
 800050e:	330c      	adds	r3, #12
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	601a      	str	r2, [r3, #0]

		Local_pu32TaskPSP-- ;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3b04      	subs	r3, #4
 800051c:	607b      	str	r3, [r7, #4]
		*Local_pu32TaskPSP = DUMMY_LR ;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f06f 0202 	mvn.w	r2, #2
 8000524:	601a      	str	r2, [r3, #0]

		for(Local_u8LoopIndexGPRS =0 ; Local_u8LoopIndexGPRS < 13 ; Local_u8LoopIndexGPRS++ )
 8000526:	2300      	movs	r3, #0
 8000528:	70bb      	strb	r3, [r7, #2]
 800052a:	e008      	b.n	800053e <InitTasksStack+0xae>
		{
			Local_pu32TaskPSP-- ;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3b04      	subs	r3, #4
 8000530:	607b      	str	r3, [r7, #4]
			*Local_pu32TaskPSP = 0 ;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
		for(Local_u8LoopIndexGPRS =0 ; Local_u8LoopIndexGPRS < 13 ; Local_u8LoopIndexGPRS++ )
 8000538:	78bb      	ldrb	r3, [r7, #2]
 800053a:	3301      	adds	r3, #1
 800053c:	70bb      	strb	r3, [r7, #2]
 800053e:	78bb      	ldrb	r3, [r7, #2]
 8000540:	2b0c      	cmp	r3, #12
 8000542:	d9f3      	bls.n	800052c <InitTasksStack+0x9c>
		}

		UserTasks[Local_u8LoopIndex].PSPValue = (u32)Local_pu32TaskPSP ;
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4907      	ldr	r1, [pc, #28]	; (8000568 <InitTasksStack+0xd8>)
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	440b      	add	r3, r1
 800054e:	601a      	str	r2, [r3, #0]
	for (Local_u8LoopIndex = 0 ; Local_u8LoopIndex < MAX_TASK_NUM ; Local_u8LoopIndex++)
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	3301      	adds	r3, #1
 8000554:	70fb      	strb	r3, [r7, #3]
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	2b04      	cmp	r3, #4
 800055a:	d9bd      	bls.n	80004d8 <InitTasksStack+0x48>

	}
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000024 	.word	0x20000024
 800056c:	20004000 	.word	0x20004000
 8000570:	20005000 	.word	0x20005000
 8000574:	20004c00 	.word	0x20004c00
 8000578:	20004800 	.word	0x20004800
 800057c:	20004400 	.word	0x20004400
 8000580:	0800071d 	.word	0x0800071d
 8000584:	0800085d 	.word	0x0800085d
 8000588:	08000873 	.word	0x08000873
 800058c:	08000889 	.word	0x08000889
 8000590:	0800089d 	.word	0x0800089d

08000594 <GetCurrentPSPValue>:

u32 GetCurrentPSPValue(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	return UserTasks[CurrentTask].PSPValue ;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <GetCurrentPSPValue+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <GetCurrentPSPValue+0x1c>)
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	4413      	add	r3, r2
 80005a2:	681b      	ldr	r3, [r3, #0]

}
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000024 	.word	0x20000024

080005b4 <SaveCurrentPSPValue>:

void SaveCurrentPSPValue(u32 Copy_u32CurrentPSPValue)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	UserTasks[CurrentTask].PSPValue = Copy_u32CurrentPSPValue ;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <SaveCurrentPSPValue+0x20>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <SaveCurrentPSPValue+0x24>)
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	4413      	add	r3, r2
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]

}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000024 	.word	0x20000024

080005dc <ChangePSP>:
__attribute__((naked)) void ChangePSP(void)
{


	/* 1 init PSP WITH TASK1 STACK */
	__asm volatile ("PUSH {LR}  ") ;
 80005dc:	b500      	push	{lr}

	__asm volatile ("BL GetCurrentPSPValue") ;
 80005de:	f7ff ffd9 	bl	8000594 <GetCurrentPSPValue>

	__asm volatile ("MSR PSP , R0") ;
 80005e2:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}  ") ;
 80005e6:	f85d eb04 	ldr.w	lr, [sp], #4

	/*change SP To PSP Using Control Register */
	__asm volatile ("MOV R0 , #0x02") ;
 80005ea:	f04f 0002 	mov.w	r0, #2

	__asm volatile ("MSR CONTROL , R0") ;
 80005ee:	f380 8814 	msr	CONTROL, r0

	/*EXIT*/
	__asm volatile("BX LR") ;
 80005f2:	4770      	bx	lr
}
 80005f4:	bf00      	nop
	...

080005f8 <EnableSystemFaults>:

void EnableSystemFaults(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

	SCB ->SHCSR |= (1<<16) ;       /* Mem Mange Fault enable */
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <EnableSystemFaults+0x30>)
 80005fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <EnableSystemFaults+0x30>)
 8000602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000606:	6253      	str	r3, [r2, #36]	; 0x24

	SCB ->SHCSR |= (1<<17) ;       /* Bus  Fault enable */
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <EnableSystemFaults+0x30>)
 800060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <EnableSystemFaults+0x30>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6253      	str	r3, [r2, #36]	; 0x24

	SCB ->SHCSR |= (1<<18) ;       /* Usage  Fault enable */
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <EnableSystemFaults+0x30>)
 8000616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000618:	4a03      	ldr	r2, [pc, #12]	; (8000628 <EnableSystemFaults+0x30>)
 800061a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800061e:	6253      	str	r3, [r2, #36]	; 0x24

}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <UpdateNextTask>:

void UpdateNextTask(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	u8 Local_u8loopCount ;
	for(Local_u8loopCount = 0 ; Local_u8loopCount < MAX_TASK_NUM ; Local_u8loopCount++)
 8000632:	2300      	movs	r3, #0
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	e01f      	b.n	8000678 <UpdateNextTask+0x4c>
	{
		CurrentTask++ ;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <UpdateNextTask+0x78>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <UpdateNextTask+0x78>)
 8000640:	6013      	str	r3, [r2, #0]
		CurrentTask%= MAX_TASK_NUM ;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <UpdateNextTask+0x78>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <UpdateNextTask+0x7c>)
 8000648:	fba3 2301 	umull	r2, r3, r3, r1
 800064c:	089a      	lsrs	r2, r3, #2
 800064e:	4613      	mov	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	1aca      	subs	r2, r1, r3
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <UpdateNextTask+0x78>)
 8000658:	601a      	str	r2, [r3, #0]

		if ((UserTasks[CurrentTask].CurrentState == ReadyState) &&( Local_u8loopCount !=0) )
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <UpdateNextTask+0x78>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <UpdateNextTask+0x80>)
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	4413      	add	r3, r2
 8000664:	3308      	adds	r3, #8
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <UpdateNextTask+0x46>
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d106      	bne.n	8000680 <UpdateNextTask+0x54>
	for(Local_u8loopCount = 0 ; Local_u8loopCount < MAX_TASK_NUM ; Local_u8loopCount++)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	3301      	adds	r3, #1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b04      	cmp	r3, #4
 800067c:	d9dc      	bls.n	8000638 <UpdateNextTask+0xc>
 800067e:	e000      	b.n	8000682 <UpdateNextTask+0x56>
		{
			break ;
 8000680:	bf00      	nop
		}

	}
	if( (UserTasks[CurrentTask].CurrentState != ReadyState) )   /* All Task is block Run ideal task */
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <UpdateNextTask+0x78>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a09      	ldr	r2, [pc, #36]	; (80006ac <UpdateNextTask+0x80>)
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	4413      	add	r3, r2
 800068c:	3308      	adds	r3, #8
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <UpdateNextTask+0x6e>
	{
		CurrentTask = 0 ;
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <UpdateNextTask+0x78>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
	}
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	20000000 	.word	0x20000000
 80006a8:	cccccccd 	.word	0xcccccccd
 80006ac:	20000024 	.word	0x20000024

080006b0 <TaskDelay>:



void TaskDelay(u32 Copy_u32BlockTick)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
		/*disable Gloable interrupt */
		ENTER_CRITICAL_SECTION() ;
 80006b8:	f04f 0001 	mov.w	r0, #1
 80006bc:	f380 8810 	msr	PRIMASK, r0

	if (CurrentTask != 0U )   /* zero for ideal task cant be blocked  */
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <TaskDelay+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d01c      	beq.n	8000702 <TaskDelay+0x52>
	{
		UserTasks[CurrentTask].BlockCount =  Copy_u32BlockTick + GlobalTickCount ;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <TaskDelay+0x60>)
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <TaskDelay+0x5c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	440a      	add	r2, r1
 80006d4:	490f      	ldr	r1, [pc, #60]	; (8000714 <TaskDelay+0x64>)
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	440b      	add	r3, r1
 80006da:	3304      	adds	r3, #4
 80006dc:	601a      	str	r2, [r3, #0]

		UserTasks[CurrentTask].CurrentState = BlockedState ;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <TaskDelay+0x5c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <TaskDelay+0x64>)
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4413      	add	r3, r2
 80006e8:	3308      	adds	r3, #8
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]

		EXIT_CRITICAL_SECTION() ;
 80006ee:	f04f 0000 	mov.w	r0, #0
 80006f2:	f380 8810 	msr	PRIMASK, r0
		/* Call the scheduler by pendsv */
		SCB->ICSR |= (1 <<28) ;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <TaskDelay+0x68>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <TaskDelay+0x68>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6053      	str	r3, [r2, #4]

	}

}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000000 	.word	0x20000000
 8000710:	20000020 	.word	0x20000020
 8000714:	20000024 	.word	0x20000024
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <IdealTaskHandler>:

static void IdealTaskHandler (void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

	while(1) ;
 8000720:	e7fe      	b.n	8000720 <IdealTaskHandler+0x4>
	...

08000724 <MRCC_VidInit>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"


void MRCC_VidInit( void ){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0

	u32 LOC_u32TimeOut = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]

	#if   CLOCK_TYPE == HSI

		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSI Selected As A System Clock */
		CLR_BIT( MRCC->CFGR , 0  );
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MRCC_VidInit+0x64>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MRCC_VidInit+0x64>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	6053      	str	r3, [r2, #4]
		CLR_BIT( MRCC->CFGR , 1  );
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MRCC_VidInit+0x64>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MRCC_VidInit+0x64>)
 8000740:	f023 0302 	bic.w	r3, r3, #2
 8000744:	6053      	str	r3, [r2, #4]
		/* Bit 0 -> Enable The HSI Clock */
		SET_BIT( MRCC->CR   , 0  );
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MRCC_VidInit+0x64>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MRCC_VidInit+0x64>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6013      	str	r3, [r2, #0]
		/* Bit 1 -> Checking While The HSI Clock Is Stable */
		while( ( ( GET_BIT( MRCC->CR , 1 ) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) ){ LOC_u32TimeOut++; }
 8000752:	e002      	b.n	800075a <MRCC_VidInit+0x36>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MRCC_VidInit+0x64>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	085b      	lsrs	r3, r3, #1
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d103      	bne.n	8000770 <MRCC_VidInit+0x4c>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <MRCC_VidInit+0x68>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d9f1      	bls.n	8000754 <MRCC_VidInit+0x30>

		SET_BIT( MRCC->CR , 19 );

	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

		CLR_BIT( MRCC->CR , 19 );
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <MRCC_VidInit+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <MRCC_VidInit+0x64>)
 8000776:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800077a:	6013      	str	r3, [r2, #0]

		#warning " Wrong Clock Security System Configuration Choice "

	#endif

}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	0001869f 	.word	0x0001869f

08000790 <MRCC_VidEnablePeripheralClock>:



void MRCC_VidEnablePeripheralClock( u8 Copy_u8PeripheralBus , u8 Copy_u8Peripheral ){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	460a      	mov	r2, r1
 800079a:	71fb      	strb	r3, [r7, #7]
 800079c:	4613      	mov	r3, r2
 800079e:	71bb      	strb	r3, [r7, #6]


		switch( Copy_u8PeripheralBus ){
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d00f      	beq.n	80007c6 <MRCC_VidEnablePeripheralClock+0x36>
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d018      	beq.n	80007dc <MRCC_VidEnablePeripheralClock+0x4c>
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d000      	beq.n	80007b0 <MRCC_VidEnablePeripheralClock+0x20>
			case RCC_APB2 : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;

		}


}
 80007ae:	e020      	b.n	80007f2 <MRCC_VidEnablePeripheralClock+0x62>
			case RCC_AHB  : SET_BIT( MRCC->AHBENR  , Copy_u8Peripheral ); break;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MRCC_VidEnablePeripheralClock+0x6c>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	79ba      	ldrb	r2, [r7, #6]
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MRCC_VidEnablePeripheralClock+0x6c>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	e015      	b.n	80007f2 <MRCC_VidEnablePeripheralClock+0x62>
			case RCC_APB1 :	SET_BIT( MRCC->APB1ENR , Copy_u8Peripheral ); break;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MRCC_VidEnablePeripheralClock+0x6c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	2101      	movs	r1, #1
 80007ce:	fa01 f202 	lsl.w	r2, r1, r2
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <MRCC_VidEnablePeripheralClock+0x6c>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	e00a      	b.n	80007f2 <MRCC_VidEnablePeripheralClock+0x62>
			case RCC_APB2 : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MRCC_VidEnablePeripheralClock+0x6c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a04      	ldr	r2, [pc, #16]	; (80007fc <MRCC_VidEnablePeripheralClock+0x6c>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	bf00      	nop
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40021000 	.word	0x40021000

08000800 <main>:
	for (count = 0 ; count <Copy_u32Count ; count++ ) ;
}


int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

	MRCC_VidInit() ;
 8000804:	f7ff ff8e 	bl	8000724 <MRCC_VidInit>
	MRCC_VidEnablePeripheralClock(RCC_APB2, GPIOA_RCC) ;
 8000808:	2102      	movs	r1, #2
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff ffc0 	bl	8000790 <MRCC_VidEnablePeripheralClock>

	MGPIO_VidSetPinDirection(GPIOA, PIN1, OUT_SPEED_10MHZ_PP) ;
 8000810:	2201      	movs	r2, #1
 8000812:	2101      	movs	r1, #1
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fcab 	bl	8000170 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(GPIOA, PIN2, OUT_SPEED_10MHZ_PP) ;
 800081a:	2201      	movs	r2, #1
 800081c:	2102      	movs	r1, #2
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fca6 	bl	8000170 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(GPIOA, PIN3, OUT_SPEED_10MHZ_PP) ;
 8000824:	2201      	movs	r2, #1
 8000826:	2103      	movs	r1, #3
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fca1 	bl	8000170 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(GPIOA, PIN4, OUT_SPEED_10MHZ_PP) ;
 800082e:	2201      	movs	r2, #1
 8000830:	2104      	movs	r1, #4
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff fc9c 	bl	8000170 <MGPIO_VidSetPinDirection>

	EnableSystemFaults();
 8000838:	f7ff fede 	bl	80005f8 <EnableSystemFaults>

	MSTK_voidInit(1000);
 800083c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000840:	f7ff fda4 	bl	800038c <MSTK_voidInit>

	Stack_voidSchedulerStackInit(SCHED_STACK_START) ;
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <main+0x58>)
 8000846:	f7ff fd9d 	bl	8000384 <Stack_voidSchedulerStackInit>

	InitTasksStack() ;
 800084a:	f7ff fe21 	bl	8000490 <InitTasksStack>

	ChangePSP() ;
 800084e:	f7ff fec5 	bl	80005dc <ChangePSP>

	Task1_Handler();
 8000852:	f000 f803 	bl	800085c <Task1_Handler>
	/* Loop forever */
	for(;;);
 8000856:	e7fe      	b.n	8000856 <main+0x56>
 8000858:	20003c00 	.word	0x20003c00

0800085c <Task1_Handler>:
}


void Task1_Handler(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0


	while(1) {

		MGPIO_VidTogglePin(GPIOA, PIN1) ;
 8000860:	2101      	movs	r1, #1
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff fd52 	bl	800030c <MGPIO_VidTogglePin>
		TaskDelay(1000) ;
 8000868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086c:	f7ff ff20 	bl	80006b0 <TaskDelay>
		MGPIO_VidTogglePin(GPIOA, PIN1) ;
 8000870:	e7f6      	b.n	8000860 <Task1_Handler+0x4>

08000872 <Task2_Handler>:
	}
}
void Task2_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0

	while(1) {
		MGPIO_VidTogglePin(GPIOA, PIN2) ;
 8000876:	2102      	movs	r1, #2
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff fd47 	bl	800030c <MGPIO_VidTogglePin>
			TaskDelay(500) ;
 800087e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000882:	f7ff ff15 	bl	80006b0 <TaskDelay>
		MGPIO_VidTogglePin(GPIOA, PIN2) ;
 8000886:	e7f6      	b.n	8000876 <Task2_Handler+0x4>

08000888 <Task3_Handler>:

	}

}
void Task3_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

	while(1) {
		MGPIO_VidTogglePin(GPIOA, PIN3) ;
 800088c:	2103      	movs	r1, #3
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fd3c 	bl	800030c <MGPIO_VidTogglePin>
			TaskDelay(250) ;
 8000894:	20fa      	movs	r0, #250	; 0xfa
 8000896:	f7ff ff0b 	bl	80006b0 <TaskDelay>
		MGPIO_VidTogglePin(GPIOA, PIN3) ;
 800089a:	e7f7      	b.n	800088c <Task3_Handler+0x4>

0800089c <Task4_Handler>:

	}

}
void Task4_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0


	while(1) {
		MGPIO_VidTogglePin(GPIOA, PIN4) ;
 80008a0:	2104      	movs	r1, #4
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fd32 	bl	800030c <MGPIO_VidTogglePin>
			TaskDelay(125) ;
 80008a8:	207d      	movs	r0, #125	; 0x7d
 80008aa:	f7ff ff01 	bl	80006b0 <TaskDelay>
		MGPIO_VidTogglePin(GPIOA, PIN4) ;
 80008ae:	e7f7      	b.n	80008a0 <Task4_Handler+0x4>

080008b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008de:	f000 f811 	bl	8000904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e2:	f7ff ff8d 	bl	8000800 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008f4:	0800096c 	.word	0x0800096c
  ldr r2, =_sbss
 80008f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008fc:	20000074 	.word	0x20000074

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <__libc_init_array>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	2500      	movs	r5, #0
 8000908:	4e0c      	ldr	r6, [pc, #48]	; (800093c <__libc_init_array+0x38>)
 800090a:	4c0d      	ldr	r4, [pc, #52]	; (8000940 <__libc_init_array+0x3c>)
 800090c:	1ba4      	subs	r4, r4, r6
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	42a5      	cmp	r5, r4
 8000912:	d109      	bne.n	8000928 <__libc_init_array+0x24>
 8000914:	f000 f81a 	bl	800094c <_init>
 8000918:	2500      	movs	r5, #0
 800091a:	4e0a      	ldr	r6, [pc, #40]	; (8000944 <__libc_init_array+0x40>)
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <__libc_init_array+0x44>)
 800091e:	1ba4      	subs	r4, r4, r6
 8000920:	10a4      	asrs	r4, r4, #2
 8000922:	42a5      	cmp	r5, r4
 8000924:	d105      	bne.n	8000932 <__libc_init_array+0x2e>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800092c:	4798      	blx	r3
 800092e:	3501      	adds	r5, #1
 8000930:	e7ee      	b.n	8000910 <__libc_init_array+0xc>
 8000932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000936:	4798      	blx	r3
 8000938:	3501      	adds	r5, #1
 800093a:	e7f2      	b.n	8000922 <__libc_init_array+0x1e>
 800093c:	08000964 	.word	0x08000964
 8000940:	08000964 	.word	0x08000964
 8000944:	08000964 	.word	0x08000964
 8000948:	08000968 	.word	0x08000968

0800094c <_init>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr

08000958 <_fini>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	bf00      	nop
 800095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095e:	bc08      	pop	{r3}
 8000960:	469e      	mov	lr, r3
 8000962:	4770      	bx	lr
